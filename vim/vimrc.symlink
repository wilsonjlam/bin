filetype plugin indent on 
set foldmethod=indent
set nofoldenable " optionally you can set foldlevel=x where it'll fold everything fold-level above x
set ff=unix
set term=xterm-256color

set clipboard=unnamed

let mapleader=' '

" Easier to get updates to vimrc
command! Src source ~/.vimrc
" Dot Files
let HOME = expand('~')

noremap <C-\> =

set clipboard=unnamed " Use system clipboard, CHANGE TO unnamedplus FOR LINUX

imap <silent> jj <Esc>
imap <silent> kk <Esc>

" Make navigating long (wrapped) lines normal
noremap <silent> k gk
noremap <silent> j gj
noremap <silent> 0 g0
noremap <silent> $ g$
noremap <silent> ^ g^
noremap <silent> _ g_

set backspace=indent,eol,start

" Remap the search current word to allow for easier pasting of the searched word
noremap * g*
noremap # g#

" indents
set shiftwidth=4
set tabstop=4 " Number of spaces to use when tabbing
set softtabstop=4
set shiftround " Use a multiple of shiftwidth when indenting with < and >
set noexpandtab " Don't expand tabs into spaces

" smartcase searching
set ignorecase
set smartcase
set incsearch
set hlsearch " makes highlight show up on search

set list
set listchars=tab:·\ ,trail:«"makes tabs show as "·		"

syntax on
set relativenumber
set number
set mouse+=a

hi LineNr term=bold cterm=NONE ctermfg=DarkGrey ctermbg=NONE gui=NONE guifg=DarkGrey guibg=NONE " http://vim.wikia.com/wiki/Display_line_numbers
hi Folded guibg=grey10 guifg=grey50
hi SpecialKey ctermfg=darkgray guifg=gray35

"Set a column ruler at 120 char
set colorcolumn=120

set redrawtime=3000 " Delayed redraw of 3s
set lazyredraw

set scrolloff=5 " Always show 5 lines above/below the cursor

set nocompatible " be iMproved, required (doesn't try backwards compatability with vi)

set autoread
au BufRead *.txt setlocal spell

set splitright
set splitbelow

"To stop tab-indenting eyaml/yaml files
au BufRead,BufNewFile *.eyaml set filetype=yaml

aug QFClose
	au!
	au WinEnter * if winnr('$') == 1 && getbufvar(winbufnr(winnr()), "&buftype") == "quickfix"|q|endif
aug END

" :Wsudo sudo saves the file
command! Wsudo w !sudo tee % > /dev/null

" #################################################################################################
" Plugins #########################################################################################
" #################################################################################################

" Installed via the install.sh script which pulls VimPlug and installs plugins
if !empty(glob('~/.vim/autoload/plug.vim'))
	call plug#begin('~/.vim/bundle')
	" Peekaboo see your registers pop up
	Plug 'junegunn/vim-peekaboo'
	let g:peekaboo_window = "vert bo 80new"

	" Vim asks you which file you meant if no matching filename is found
	Plug 'EinfachToll/DidYouMean'

	" Figure out indent settings
	Plug 'tpope/vim-sleuth'

	" Indent context aware pasting
	Plug 'sickill/vim-pasta'

	" Commenting
	Plug 'scrooloose/nerdcommenter'
	let g:NERDSpaceDelims=1
	let g:NERDTrimTrailingWhitespace=1

	" Highlighted yanking
	Plug 'machakann/vim-highlightedyank'
	let g:highlightedyank_highlight_duration = 150

	":help surround
	Plug 'tpope/vim-surround'

	" ==============
	" fzf
	" ==============
	set rtp+=$HOMEBREW_PREFIX/Cellar/fzf
	Plug 'junegunn/fzf'
	Plug 'junegunn/fzf.vim'
		" Rg search the repo (takes in options like cli rg)
		command! -bang -nargs=* Rgcli
		\ call fzf#vim#grep(
		\	 'rg -S --column --line-number --no-heading --color=always --colors=match:fg:221 --colors=path:fg:110 --colors=line:fg:143 --colors=column:fg:109 '.<q-args>, 1,
		\	 <bang>0 ? fzf#vim#with_preview('up:60%')
		\					 : fzf#vim#with_preview('right:50%:hidden', '?'),
		\	 <bang>0)
		" nnoremap <silent> <expr> <c-p> (expand('%') =~ 'NERD_tree' ?"\<c-w>\<c-w>" : '').":GFiles\<cr>"
		noremap <leader>/ :Gcd <bar> Rg 
		" Search with rg for the current word your cursor is over (* but rg)
		noremap <leader>8 :Gcd <bar> Rg <C-R><C-W><CR>
		vnoremap <leader>/ y:Rg <C-R>"<CR>
		noremap <leader>l :BLines<CR>
		noremap <leader>L :BLines
		noremap <leader>m :Marks<CR>
		noremap <leader>h :Helptags<CR>
		noremap <C-f> :Gcd <bar> GFiles<CR>
		noremap <C-b> :Buffers<CR>
		noremap <leader>` :Files $HOME/utility<CR>
		let g:fzf_layout = { 'down': '30%' }
		let g:fzf_history_dir = '~/.local/share/fzf-history'
		let g:fzf_colors =
		\{'fg':		['fg', 'Normal'],
		\ 'bg':		['bg', 'Normal'],
		\ 'hl':		['fg', 'Comment'],
		\ 'fg+':	['fg', 'CursorLine', 'CursorColumn', 'Normal'],
		\ 'bg+':	['bg', 'CursorLine', 'CursorColumn'],
		\ 'hl+':	['fg', 'Statement'],
		\ 'info':	['fg', 'PreProc'],
		\ 'border':	['fg', 'Ignore'],
		\ 'prompt':	['fg', 'Conditional'],
		\ 'pointer':	['fg', 'Exception'],
		\ 'marker':	['fg', 'Keyword'],
		\ 'spinner':	['fg', 'Label'],
		\ 'header':	['fg', 'Comment'],
		\}


	" ==============
	" Buffers Stuffs
	" ==============
	" Don't write buffers to disk when opening a new one
	" From documentation:
	"	 When off a buffer is unloaded when it is |abandon|ed.
	"	 When on a buffer becomes hidden when it is |abandon|ed.
	set hidden

	Plug 'qpkorr/vim-bufkill', {'on': 'BD'}
		function! DeleteHiddenBuffers()
			let tpbl=tabpagebuflist()
			for buf in filter(range(1, bufnr('$')), 'bufexists(v:val) && index(tpbl, v:val)==-1 && index(["help", ""], getbufvar(v:val, "&buftype")) != -1')
				silent execute 'bwipeout' buf
			endfor
		endfunction

	" Pane Management
	Plug 't9md/vim-choosewin', {'on': '<Plug>(choosewin)'}
		nmap <leader><tab> <Plug>(choosewin)
		let g:choosewin_overlay_enable = 1
		map - 10<C-w>-
		map _ 10<C-w>+
		map = 10<C-w><
		map + 10<C-w>>

	" Buffer Movement
	nnoremap <leader>bn :bn<CR> " Next buffer
	nnoremap <leader>bp :bp<CR> " Previous buffer
	nnoremap <leader>bv :vert sb
	nnoremap <leader>bx :sb
	" Move this buffer into a split right but keep focus on your original pane
	nnoremap <C-w><C-l> :bp +vert\ sbn\ +TmuxNavigateLeft<CR>
	" Move this buffer into a split left but keep focus on your original pane
	nnoremap <C-w><C-h> :vert sb +bp<CR>
	" Move this buffer into a split below but keep focus on your original pane
	nnoremap <C-w><C-j> :bp +sbn\ +TmuxNavigateUp<CR>
	" Move this buffer into a split above but keep focus on your original pane
	nnoremap <C-w><C-k> :sb +bp<CR>

	" Tab Movement
	nnoremap <leader>[ :tabNext<CR>
	nnoremap <leader>] :tabnext<CR>

	" Buffer CLeanup
	nnoremap <leader>q :q<CR> " Close the buffer
	nnoremap <leader>bq :q<CR> " Close the buffer " I'm silly and forget sometimes and do this
	nnoremap <leader>bd :bd<CR> " Delete the current buffer
	nnoremap <leader>bD :BD<CR> " Delete the current buffer without closing out the pane
	nnoremap <leader>bo :only<CR> " Make your current buffer the only buffer
	nnoremap <leader>bW :windo bd<CR> :call DeleteHiddenBuffers()<CR>" For deleting all buffers in a tab
	nnoremap <leader>bu :call DeleteHiddenBuffers()<CR> " Deletes all hidden buffers


	" ==============
	" Tmux
	" ==============
	Plug 'christoomey/vim-tmux-navigator'


	" ==============
	" Airline
	" ==============
	Plug 'vim-airline/vim-airline'
	Plug 'vim-airline/vim-airline-themes'
		set laststatus=2 " For airline to always show the status bar
		if has ('gui_running')
			set guifont=Meslo\ LG\ M\ Regular\ for\ Powerline:h11
		endif
		let g:airline_theme = 'bubblegum'
		let g:airline_powerline_fonts = 1
		let g:airline_detect_modified = 1
		let g:airline#extensions#wordcount#enabled = 0
		" Airline Buffers
		let g:airline#extensions#tabline#enabled = 1 " Set Airline to show buffers at the top of the screen
		let g:airline#extensions#tabline#fnamemod = ':t' "show just the filename
		let g:airline#extensions#tabline#buffer_nr_show = 1
		let g:airline#extensions#tabline#buffer_nr_format = '[%s] '
		let g:airline#extensions#tabline#switch_buffers_and_tabs = 1
		" Airline Extensions
		let g:airline#extensions#branch#displayed_head_limit = 15
		let g:airline#extensions#tabline#enabled = 1
		" Airline Sections
		function! AirlineInit()
			call airline#parts#define_minwidth('linenr', 500)
			call airline#parts#define_minwidth('maxlinenr', 500)
			" let g:airline_section_a = airline#section#create(['mode'])			 "(mode, crypt, paste, spell, iminsert)
			let g:airline_section_b = airline#section#create(['branch'])			 "(hunks, branch)
			let g:airline_section_c = airline#section#create(['path'])			 "(bufferline or filename)
			" let g:airline_section_gutter	(readonly, csv)
			let g:airline_section_x = airline#section#create(['filetype'])			 "(tagbar, filetype, virtualenv)
			let g:airline_section_y = airline#section#create([]) " (fileencoding, fileformat)
			let g:airline_section_z = airline#section#create(['linenr', 'maxlinenr', '%{col(".")}'])			 "(percentage, line number, column number)
			let g:airline_section_error = [] " (ycm_error_count, syntastic-err, eclim)
			let g:airline_section_warning = [] " (ycm_warning_count, syntastic-warn, whitespace)
		endfunction
		autocmd User AirlineAfterInit call AirlineInit()



	" ==============
	" File Explorer
	" ==============
	Plug 'scrooloose/nerdtree'
		let NERDTreeShowHidden=1
		let NERDTreeShowLineNumbers=1
		nmap `` :NERDTreeToggle<CR>

	" ==============
	" Git Stuffs
	" ==============
	Plug 'airblade/vim-gitgutter'
	"avoid gutter popping in and out
	" set signcolumn=yes

	" Git commands (G<something>)
	Plug 'tpope/vim-fugitive'
		noremap <leader>gs :vertical Git<CR>
		noremap <leader>gb :Gbrowse!<CR>

	" Git commit browser
	Plug 'junegunn/gv.vim', {'on': 'GV'}

	set diffopt=iwhite

	" Stash Viewing
	Plug 'aacunningham/vim-fuzzy-stash'

	" ==============
	" Movement
	" ==============
	Plug 'easymotion/vim-easymotion'
		map <leader>j <Plug>(easymotion-j)
		map <leader>k <Plug>(easymotion-k)
		map f <Plug>(easymotion-f)
		map F <Plug>(easymotion-F)
		map t <Plug>(easymotion-t)
		map T <Plug>(easymotion-T)
		map yf y<Plug>(easymotion-fl)
		map yF y<Plug>(easymotion-Fl)
		map yt y<Plug>(easymotion-tl)
		map yT y<Plug>(easymotion-Tl)
		map <leader>W <Plug>(easymotion-w)
		map <leader>B <Plug>(easymotion-b)
		map <leader>E <Plug>(easymotion-e)


	" ==============
	" Marks
	" ==============
	" Tell vim to remember certain things when we exit
	"	'100	:	marks will be remembered for up to 100 previously edited files
	"	"100 :	will save up to 100 lines for each register
	"	:20	:	up to 20 lines of command-line history will be remembered
	"	%		:	saves and restores the buffer list
	"	n... :	where to save the viminfo files
	" set viminfo='100,\"30,:20,%,n~/.viminfo

	" Displays your marks in your git gutter
	Plug 'kshenoy/vim-signature'
	" Plug 'MattesGroeger/vim-bookmarks'
	" nmap me <Plug>BookmarkAnnotate


	" =======================
	" Autocomplete & Snippets
	" =======================
	" Snippets
	Plug 'SirVer/ultisnips'
	Plug 'honza/vim-snippets' " bring these in one at a time
		let g:UltiSnipsEditSplit="vertical"
		let g:UltiSnipsExpandTrigger = "<tab>"
		let g:UltiSnipsJumpForwardTrigger = "<tab>"
		let g:UltiSnipsJumpBackwardTrigger = "<s-tab>"
		let g:UltiSnipsSnippetDir = "$HOME/utility/vim/UltiSnips"

	" Autocomplete
	" Plug 'Valloric/YouCompleteMe', { 'do': './install.py' }
		" " make YCM compatible with UltiSnips (using supertab)
		let g:ycm_key_list_select_completion = ['<C-n>', '<Down>']
		let g:ycm_key_list_previous_completion = ['<C-p>', '<Up>']
		" let g:ycm_autoclose_preview_window_after_completion = 1
		" let g:ycm_autoclose_preview_indow_after_insertion = 1
		" let g:ycm_filepath_blacklist = {}
		" let g:SuperTabDefaultCompletionType = '<C-n>'

	" Tab Completion
	Plug 'ervandew/supertab'
		let g:SuperTabDefaultCompletionType = "<C-n>"

	" Autocomplete Parens
	Plug 'jiangmiao/auto-pairs'
		" unmatched close jumps to next close, <c-v>} will avoid
		let g:AutoPairsFlyMode = 0 " this works when you don't want it to
		
		" let g:AutoPairsShortcutBackInsert = '<M-b>' "this doesn't work in macVim,
		" need to remap
		" Default: {'(':')', '[':']', '{':'}',"'":"'",'"':'"', '`':'`'}
		let g:AutoPairs ={
			\ '(':')',
			\ '[':']',
			\ '{':'}',
			\ "'":"'",
			\ '"':'"',
			\ '<':'>'
		\}
		let g:AutoPairsCenterLine = 0


	" =======
	" Linting
	" =======
	Plug 'dense-analysis/ale'
		" \	'javascript': ['eslint', 'flow'],
		let g:ale_linters = {
		\	'typescript': ['prettier', 'tslint', 'tsserver', 'typecheck'],
		\	'shell': [],
		\	'markdown': [],
		\}
		let g:ale_lint_delay = 1000 "delay 1s after text change before lintng
		let g:ale_lint_on_insert_leave = 1
		let g:ale_sign_error = 'E' " could use emoji
		let g:ale_sign_warning = 'W' " could use emoji
		let g:ale_statusline_format = ['X %d', '? %d', '']
		" %linter% is the name of the linter that provided the message
		" %s is the error or warning message
		let g:ale_echo_msg_format = '%linter% says %s'
		let g:ale_open_lists = 0
		let g:ale_keep_list_window_open = 0
		let g:ale_set_loclist = 0
		let g:ale_set_quickfix = 0
		" Map keys to navigate between lines with errors and warnings.
		nnoremap <leader>an :ALENextWrap<cr>
		nnoremap <leader>ap :ALEPreviousWrap<cr>
		let g:ale_sign_column_always=1
		let g:ale_set_balloons = 1
		let g:ale_open_list = 1
	
	" ======================
	" Language Server Plugin
	" ======================
	
	Plug 'neoclide/coc.nvim', {'branch': 'release'}
		let g:coc_config_home = "$HOME/utility/vim"

		" CoC will automatically pick up these extensions and install
		" them as needed
		let g:coc_global_extensions = [
			\'coc-fzf-preview',
			\'coc-json', 'coc-git', 'coc-sh',
			\'coc-html', 'coc-css', 'coc-tsserver', 'coc-eslint', 'coc-prettier',
			\'coc-java',
			\'coc-markdown-preview-enhanced', 'coc-webview']

		" Coc utility comands to use and understand coc itself
		nmap <leader>. <Plug>(coc-codeaction-line)
		nmap <leader>c :CocCommand <cr>
		
		function AutoFormat()
			if(g:coc_service_initialized)
				call CocAction('format')
			endif
		endfunction

		" Autoformat on save
		au BufWrite * :try|call AutoFormat()| catch | | endtry

		" GoTo code navigation.
		nmap <silent> gd <Plug>(coc-definition)
		nmap <silent> gt <Plug>(coc-type-definition)
		nmap <silent> gi <Plug>(coc-implementation)
		nmap <silent> gr <Plug>(coc-references)
		nnoremap <silent> H :call <SID>show_documentation()<CR>

		" inoremap <expr> <tab> pumvisible() ? "\<C-n>" : "\<Tab>"
		" inoremap <expr> <s-tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
		inoremap <expr> <CR> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
		function! s:show_documentation()
			if (index(['vim','help'], &filetype) >= 0)
				execute 'h '.expand('<cword>')
			elseif (coc#rpc#ready())
				call CocActionAsync('doHover')
			else
				execute '!' . &keywordprg . " " . expand('<cword>')
			endif
		endfunction
	
	" ===================
   	" Syntax Highlighting
	" ===================

	" Markdown
	Plug 'preservim/vim-markdown', {'for': 'markdown'}

"	" XML
	Plug 'othree/xml.vim', { 'for': 'xml' }

"	" CSS
	Plug 'ap/vim-css-color', { 'for': 'css' }

"	" Go Development
	Plug 'fatih/vim-go', { 'do': ':GoInstallBinaries', 'for': 'go' }

	" Typescript Development
	Plug 'leafgarland/typescript-vim', { 'for': 'typescript' }

	" Angular Development
	Plug 'burnettk/vim-angular', { 'for': 'javascript' }

	" React Development
	Plug 'yuezk/vim-js'
	Plug 'maxmellon/vim-jsx-pretty'
		let g:vim_jsx_pretty_highlight_close_tag = 1

	" Hack Development
	Plug 'hhvm/vim-hack', { 'for': 'php' }

	" Nginx Development
	Plug 'chr4/nginx.vim', { 'for': 'nginx' }

	" ============
	" ColorSchemes
	" ============
	command! Colorscheme colorscheme
	nnoremap <leader>C :Colorscheme <CR> :Colors<CR>
	" Plug 'chriskempson/base16-vim', { 'on': 'Colorscheme' }
	Plug 'chriskempson/vim-tomorrow-theme', { 'on': 'Colorscheme' }
	Plug 'hzchirs/vim-material', { 'on': 'Colorscheme' }
	Plug 'junegunn/seoul256.vim', { 'on': 'Colorscheme' }
		let g:seoul256_background = 233
	Plug 'kaicataldo/material.vim', { 'on': 'Colorscheme' }
	Plug 'kristijanhusak/vim-hybrid-material', { 'on': 'Colorscheme' }
	Plug 'mkarmona/materialbox', { 'on': 'Colorscheme' }
	Plug 'morhetz/gruvbox', { 'on': 'Colorscheme' }
	Plug 'rhysd/vim-color-spring-night', { 'on': 'Colorscheme' }
	Plug 'sts10/vim-pink-moon', { 'on': 'Colorscheme' }
	Plug 'w0ng/vim-hybrid', { 'on': 'Colorscheme' }
	Plug 'zcodes/vim-colors-basic', { 'on': 'Colorscheme' }
	Plug 'franbach/miramare', { 'on': 'Colorscheme' }
	Plug 'sainnhe/gruvbox-material', { 'on': 'Colorscheme' }

	" let g:hybrid_custom_term_colors=1
	set background=dark
	set termguicolors
	let base16colorspace=256

	call plug#end()
endif
" #################################################################################################
" Plugins #########################################################################################
" #################################################################################################

try
	" colorscheme gruvbox-material
	colorscheme miramare
catch
	colorscheme slate
endtry
