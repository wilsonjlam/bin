snippet log "console.log" b
console.log('${1:STUFF}');
endsnippet

snippet error "console.error" b
console.error('${1:STUFF}');
endsnippet

snippet IIFE "Angular IIFE" b
(function() {
	angular.module('${1:MODULE}')
		$2
 })();
endsnippet

snippet .then "then"
.then(function() {
	${1:BODY}
})
endsnippet

snippet .catch "catch"
.catch(function() {
	${1:BODY}
})
endsnippet

snippet .finally "finally"
.finally(function() {
	${1:BODY}
});
endsnippet

#####################
#  Testing Things
#####################

snippet stub "sandbox.stub"
sandbox.stub()
endsnippet

snippet MOCHA "Mocha File Setup" b
describe('${1:File-to-Test}', function() {
	'use strict';
	var sandbox;
	var `!p snip.rv = t[1]`;
	beforeEach(function() {
		sandbox = sinon.sandbox.create();

		$2

		inject(['`!p snip.rv = t[1]`', '$3',
			function(_`!p snip.rv = t[1]`_, $4) {
				`!p snip.rv = t[1]` = _`!p snip.rv = t[1]`_;
				$5
			}
		]);
	});
	afterEach(function()
		sandbox.restore();
	});
});
endsnippet

snippet describe "describe block" b
describe('${1:DESCRIPTION}', function() {
	${2:BODY}
});
endsnippet

snippet it "it statement" b
it('${1:DESCRIPTION}', function() {
	${2:BODY}
});
endsnippet

snippet expect "expect statement" b
expect(${1:ACTUAL})${2:ASSERTION};
endsnippet

snippet beforeEach "beforeEach statement" b
beforeEach(function() {
	${1:BODY}
});
endsnippet

snippet afterEach "afterEach statement" b
afterEach(function() {
	${1:BODY}
});
endsnippet

snippet module "module" b
module(function($provide) {
	${1:BODY}
});
endsnippet
snippet $pv "provide value" b
$provide.value('${1:THING_TO_PROVIDE}', ${2:VALUE});
endsnippet

snippet $pf "provide factory" b
$provide.factory('${1:THING_TO_PROVIDE}', function() {
	var service = {
		${2: Attributes}
	};

	return service;
});
endsnippet

snippet $ps "provide service" b
$provide.service('${1:THING_TO_PROVIDE}', function() {
	var service = {
		${2: Attributes}
	};

	return service;
});
endsnippet

snippet $pd "provide decorator" b
$provide.decorator('${1:THING_TO_DECORATE}', function($delegate) {
	${2: DECORATE}

	return $delegate;
});
endsnippet

snippet _ "inject assignment" b
${1} = _${1}_;
endsnippet
